name: "hotfix-task-flow"
description: "Fast-track workflow for emergency production hotfixes with abbreviated review process"
version: "2.0.0"

trigger:
  condition: "labels.includes('hotfix') || labels.includes('urgent') || labels.includes('emergency') || priority >= 2000"

context:
  repo_required: true
  fast_track: true

variables:
  hotfix_priority: 2000
  max_planning_iterations: 2

steps:
  - name: mark_task_in_progress
    type: SimpleTaskStatusStep
    config:
      status: "in_progress"

  - name: planning_loop
    type: PlanningLoopStep
    depends_on: ["mark_task_in_progress"]
    outputs: ["planning_loop_plan_result", "planning_loop_eval_result"]
    config:
      step: "1-planning"
      evalStep: "1.5-eval-plan"
      revisionStep: "1-planning-revision"
      persona: "lead-engineer"
      evalPersona: "tdd-gate"
      intent: "plan"
      max_iterations: 2
      enable_tdd_gate: ${tdd_enabled || false}
      payload:
        task: ${task}
        repo: ${repo_remote}
        branch: ${featureBranchName}
        project_id: ${projectId}
        hotfix_mode: true
        time_constraint: "This is an EMERGENCY HOTFIX. Prioritize speed and correctness over perfect design."

  - template: implementation
    name: implementation_request
    depends_on: ["planning_loop"]
    overrides:
      config:
        payload:
          hotfix_mode: true
        timeout: 600000

  - template: qa_review
    name: qa_request
    depends_on: ["implementation_request"]
    overrides:
      config:
        payload:
          hotfix_mode: true
          fast_track: true
        timeout: 300000

  - name: handle_qa_failure
    type: SubWorkflowStep
    depends_on: ["qa_request"]
    condition: ${qa_request_status} == 'fail' || ${qa_request_status} == 'unknown'
    config:
      workflow: "review-failure-handling"
      inputs:
        review_type: "qa"
        review_result: ${qa_request_result}
        review_status: ${qa_request_status}
        milestone_context: ${milestone}
        task: ${task}
        parent_task_id: ${taskId}
        priority_scores:
          urgent: 2000
          deferred: 50
        config:
          block_original_task: true
        project_id: ${projectId}
        repo: ${repo_remote}
        tdd_aware: ${tdd_aware || false}
        tdd_stage: ${tdd_stage || 'implementation'}
        existing_tasks: []

  - name: mark_task_in_review
    type: SimpleTaskStatusStep
    depends_on: ["qa_request"]
    condition: ${qa_request_status} == 'pass'
    config:
      status: "in_review"

  - template: code_review
    name: code_review_request
    depends_on: ["mark_task_in_review"]
    overrides:
      config:
        payload:
          hotfix_mode: true
          focus: "critical"
        timeout: 300000

  - name: handle_code_review_failure
    type: SubWorkflowStep
    depends_on: ["code_review_request"]
    condition: ${code_review_request_status} == 'fail' || ${code_review_request_status} == 'unknown'
    config:
      workflow: "review-failure-handling"
      inputs:
        review_type: "code_review"
        review_result: ${code_review_request_result}
        review_status: ${code_review_request_status}
        milestone_context: ${milestone}
        task: ${task}
        parent_task_id: ${taskId}
        priority_scores:
          urgent: 2000
          deferred: 50
        config:
          block_original_task: true
        project_id: ${projectId}
        repo: ${repo_remote}
        tdd_aware: ${tdd_aware || false}
        tdd_stage: ${tdd_stage || 'implementation'}
        existing_tasks: []

  - template: security_review
    name: security_request
    depends_on: ["code_review_request"]
    condition: ${code_review_request_status} == 'pass'
    overrides:
      config:
        payload:
          hotfix_mode: true
          focus: "critical"
        timeout: 300000

  - name: handle_security_failure
    type: SubWorkflowStep
    depends_on: ["security_request"]
    condition: ${security_request_status} == 'fail' || ${security_request_status} == 'unknown'
    config:
      workflow: "review-failure-handling"
      inputs:
        review_type: "security_review"
        review_result: ${security_request_result}
        review_status: ${security_request_status}
        milestone_context: ${milestone}
        task: ${task}
        parent_task_id: ${taskId}
        priority_scores:
          urgent: 2000
          deferred: 50
        config:
          block_original_task: true
        project_id: ${projectId}
        repo: ${repo_remote}
        tdd_aware: ${tdd_aware || false}
        tdd_stage: ${tdd_stage || 'implementation'}
        existing_tasks: []

  - name: mark_task_done
    type: SimpleTaskStatusStep
    depends_on: ["security_request"]
    condition: ${security_request_status} == 'pass'
    config:
      status: "done"
      comment: "Hotfix completed - DevOps review skipped for expedited deployment"

failure_handling:
  on_workflow_failure:
    - name: mark_task_blocked
      type: SimpleTaskStatusStep
      config:
        status: "blocked"
        comment: "Hotfix workflow failed at step: ${failed_step} - URGENT attention required"

timeouts:
  default_step: 300000
  planning_loop_timeout: 600000
  implementation_timeout: 600000
