name: "context-only"
description: "Context analysis workflow for understanding codebases without making changes"
version: "1.0.0"
trigger:
  condition: "task_type == 'analysis' || task_type == 'context' || task_type == 'understand' || scope == 'readonly'"
context:
  repo_required: true
  branch_strategy: "none"  # No branching for read-only analysis

steps:
  # Phase 1: Task Setup
  - name: "pull-analysis-task"
    type: "PullTaskStep"
    description: "Pull analysis task for context understanding"
    config:
      streamName: "${REDIS_STREAM_NAME}"
      consumerGroup: "${CONSUMER_GROUP}-analysis"
      consumerId: "${CONSUMER_ID}-analysis"
      blockTime: 5000
      maxMessages: 1
    outputs:
      - "task"
      - "taskId"
      - "analysisScope"

  - name: "update-status-analysis-start"
    type: "TaskUpdateStep"
    description: "Mark analysis as started"
    depends_on: ["pull-analysis-task"]
    config:
      updateType: "status"
      status: "in_progress"
      message: "üîç Starting codebase analysis - gathering comprehensive context"
      metadata:
        workflow: "context-only"
        scope: "${analysisScope}"
        readonly: true
        analysisType: "comprehensive"
        phase: "analysis_start"
    outputs:
      - "updated"

  # Phase 2: Comprehensive Context Gathering
  - name: "gather-deep-context"
    type: "ContextStep"
    description: "Gather deep repository context for comprehensive analysis"
    depends_on: ["pull-analysis-task"]
    config:
      repoPath: "${REPO_PATH}"
      includePatterns: 
        - "**/*.ts"
        - "**/*.js"
        - "**/*.tsx"
        - "**/*.jsx"
        - "**/*.json"
        - "**/*.md"
        - "**/*.yml"
        - "**/*.yaml"
        - "**/*.toml"
        - "**/*.ini"
        - "**/*.conf"
        - "**/*.config.*"
        - "**/package*.json"
        - "**/tsconfig*.json"
        - "**/vitest*.config*"
        - "**/jest*.config*"
        - "**/webpack*.config*"
        - "**/rollup*.config*"
        - "**/vite*.config*"
        - "**/babel*.config*"
        - "**/eslint*"
        - "**/prettier*"
        - "**/test/**"
        - "**/tests/**"
        - "**/spec/**"
        - "**/docs/**"
        - "**/documentation/**"
        - "**/README*"
        - "**/CONTRIBUTING*"
        - "**/CHANGELOG*"
        - "**/LICENSE*"
        - "**/*.test.*"
        - "**/*.spec.*"
        - "**/Dockerfile*"
        - "**/docker-compose*"
        - "**/.github/**"
        - "**/scripts/**"
        - "**/tools/**"
      excludePatterns: 
        - "node_modules/**"
        - ".git/**"
        - "dist/**"
        - "build/**"
        - "coverage/**"
        - "*.log"
        - ".next/**"
        - ".nuxt/**"
        - ".output/**"
        - "vendor/**"
        - "__pycache__/**"
        - "*.pyc"
        - ".pytest_cache/**"
        - ".DS_Store"
        - "Thumbs.db"
      maxFiles: 2000  # Comprehensive analysis
      maxBytes: 20971520  # 20MB for deep analysis
      trackLines: true
      trackHash: true
      scanGitHistory: true
      includeArchitecture: true
      includeDependencies: true
      analyzeComplexity: true
      generateSummary: true
    outputs:
      - "context"
      - "repoScan"
      - "gitInfo"
      - "architecture"
      - "dependencies"
      - "complexity"
      - "summary"

  - name: "update-progress-context-gathered"
    type: "TaskUpdateStep"
    description: "Update progress after context gathering"
    depends_on: ["gather-deep-context"]
    config:
      updateType: "progress"
      progress: 40
      message: "Context gathered successfully - analyzing ${repoScan.totalFiles} files (${repoScan.totalSize} bytes)"
      metadata:
        filesScanned: "${repoScan.totalFiles}"
        totalSize: "${repoScan.totalSize}"
        languages: "${repoScan.languages}"
        hasTests: "${repoScan.hasTests}"
        hasDocumentation: "${repoScan.hasDocumentation}"
        phase: "context_gathered"
    outputs:
      - "updated"

  # Phase 3: Architectural Analysis
  - name: "analyze-architecture"
    type: "PlanningStep"
    description: "Perform architectural analysis and create comprehensive understanding"
    depends_on: ["gather-deep-context"]
    config:
      persona: "architect"
      temperature: 0.2
      maxPlanningTokens: 6000
      requireApproval: false  # No approval needed for analysis
      planValidationRules: []  # No validation needed
      includeContextSummary: true
      analysisDepth: "comprehensive"
      analysisMode: true
      architecturalFocus: true
      generateRecommendations: true
    outputs:
      - "architecturalAnalysis"
      - "systemOverview"
      - "componentMap"
      - "dataFlow"
      - "integrationPoints"
      - "technicalDebt"
      - "recommendations"
      - "patterns"
      - "concerns"

  - name: "update-progress-architecture-analyzed"
    type: "TaskUpdateStep"
    description: "Update progress after architectural analysis"
    depends_on: ["analyze-architecture"]
    config:
      updateType: "progress"
      progress: 70
      message: "Architectural analysis completed - identified ${componentMap.length} components and ${patterns.length} patterns"
      metadata:
        components: "${componentMap.length}"
        patterns: "${patterns.length}"
        integrationPoints: "${integrationPoints.length}"
        technicalDebtItems: "${technicalDebt.length}"
        phase: "architecture_analyzed"
    outputs:
      - "updated"

  # Phase 4: Code Quality Analysis
  - name: "analyze-code-quality"
    type: "PlanningStep"
    description: "Analyze code quality, patterns, and maintainability"
    depends_on: ["analyze-architecture"]
    config:
      persona: "senior_engineer"
      temperature: 0.3
      maxPlanningTokens: 5000
      requireApproval: false
      planValidationRules: []
      includeContextSummary: true
      includeArchitecture: true
      analysisDepth: "comprehensive"
      codeQualityFocus: true
      maintainabilityAnalysis: true
      performanceAnalysis: true
      securityAnalysis: true
    outputs:
      - "codeQuality"
      - "maintainabilityScore"
      - "testCoverage"
      - "codeSmells"
      - "securityConcerns"
      - "performanceIssues"
      - "bestPractices"
      - "improvements"
      - "metrics"

  - name: "update-progress-quality-analyzed"
    type: "TaskUpdateStep"
    description: "Update progress after code quality analysis"
    depends_on: ["analyze-code-quality"]
    config:
      updateType: "progress"
      progress: 85
      message: "Code quality analysis completed - maintainability score: ${maintainabilityScore}, found ${codeSmells.length} code smells"
      metadata:
        maintainabilityScore: "${maintainabilityScore}"
        codeSmells: "${codeSmells.length}"
        securityConcerns: "${securityConcerns.length}"
        performanceIssues: "${performanceIssues.length}"
        improvementSuggestions: "${improvements.length}"
        phase: "quality_analyzed"
    outputs:
      - "updated"

  # Phase 5: Testing Analysis
  - name: "analyze-testing-strategy"
    type: "PlanningStep"
    description: "Analyze current testing strategy and coverage"
    depends_on: ["analyze-code-quality"]
    config:
      persona: "qa_engineer"
      temperature: 0.4
      maxPlanningTokens: 4000
      requireApproval: false
      planValidationRules: []
      includeContextSummary: true
      includeArchitecture: true
      includeQuality: true
      testingFocus: true
      coverageAnalysis: true
      testStrategyAnalysis: true
    outputs:
      - "testingStrategy"
      - "testCoverage"
      - "testTypes"
      - "testGaps"
      - "testRecommendations"
      - "testingTools"
      - "testComplexity"
      - "testMaintainability"

  - name: "update-progress-testing-analyzed"
    type: "TaskUpdateStep"
    description: "Update progress after testing analysis"
    depends_on: ["analyze-testing-strategy"]
    config:
      updateType: "progress"
      progress: 95
      message: "Testing analysis completed - found ${testTypes.length} test types, identified ${testGaps.length} coverage gaps"
      metadata:
        testTypes: "${testTypes.length}"
        testGaps: "${testGaps.length}"
        testRecommendations: "${testRecommendations.length}"
        testComplexity: "${testComplexity}"
        testMaintainability: "${testMaintainability}"
        phase: "testing_analyzed"
    outputs:
      - "updated"

  # Phase 6: Comprehensive Report Generation
  - name: "generate-analysis-report"
    type: "PlanningStep"
    description: "Generate comprehensive analysis report"
    depends_on: ["analyze-testing-strategy"]
    config:
      persona: "technical_writer"
      temperature: 0.1
      maxPlanningTokens: 8000
      requireApproval: false
      planValidationRules: []
      includeContextSummary: true
      includeArchitecture: true
      includeQuality: true
      includeTesting: true
      reportGeneration: true
      executiveSummary: true
      technicalDetails: true
      recommendations: true
    outputs:
      - "analysisReport"
      - "executiveSummary"
      - "technicalSummary"
      - "keyFindings"
      - "criticalIssues"
      - "actionItems"
      - "roadmap"
      - "riskAssessment"

  # Phase 7: Successful Completion
  - name: "complete-analysis-success"
    type: "TaskUpdateStep"
    description: "Complete successful context analysis"
    depends_on: ["generate-analysis-report"]
    config:
      updateType: "result"
      status: "completed"
      message: "üéØ Comprehensive codebase analysis completed successfully - generated detailed insights and recommendations"
      metadata:
        filesAnalyzed: "${repoScan.totalFiles}"
        totalSize: "${repoScan.totalSize}"
        languages: "${repoScan.languages}"
        components: "${componentMap.length}"
        patterns: "${patterns.length}"
        maintainabilityScore: "${maintainabilityScore}"
        codeSmells: "${codeSmells.length}"
        securityConcerns: "${securityConcerns.length}"
        performanceIssues: "${performanceIssues.length}"
        testCoverage: "${testCoverage}"
        testGaps: "${testGaps.length}"
        keyFindings: "${keyFindings.length}"
        criticalIssues: "${criticalIssues.length}"
        actionItems: "${actionItems.length}"
        hasExecutiveSummary: true
        hasTechnicalSummary: true
        hasRecommendations: true
        hasRoadmap: true
        analysisComplete: true
        readonly: true
        phase: "analysis_complete"
        reportSections:
          - "Executive Summary"
          - "Technical Architecture"
          - "Code Quality Assessment"
          - "Testing Strategy"
          - "Security Analysis"
          - "Performance Analysis"
          - "Recommendations"
          - "Risk Assessment"
          - "Implementation Roadmap"
    outputs:
      - "updated"

# Minimal failure handling since this is read-only
failure_handling:
  on_step_failure:
    - step: "update-status-analysis-error"
      type: "TaskUpdateStep"
      config:
        updateType: "failure"
        status: "failed"
        message: "Analysis workflow failed at step: ${error.step} - ${error.message}"
        metadata:
          failedStep: "${error.step}"
          errorType: "${error.type}"
          analysisImpact: "partial"
          readonly: true
          phase: "step_failure"
  
  on_workflow_failure:
    - step: "escalate-analysis-failure"
      type: "TaskUpdateStep"
      config:
        updateType: "failure"
        status: "failed"
        message: "Analysis workflow failed completely - manual review of codebase required"
        metadata:
          workflowError: "${error.message}"
          manualReviewRequired: true
          readonly: true
          phase: "workflow_failure"

# Generous timeouts for comprehensive analysis
timeouts:
  default_step: 300000     # 5 minutes
  context_step: 1200000    # 20 minutes for deep scanning
  planning_step: 900000    # 15 minutes for analysis
  report_step: 1200000     # 20 minutes for comprehensive reporting