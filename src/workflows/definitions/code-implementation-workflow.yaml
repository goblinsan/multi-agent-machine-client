name: "code-implementation-workflow"
description: "Complete workflow for code implementation tasks"
version: "1.0.0"
trigger:
  condition: "task_type == 'code-implementation'"
context:
  repo_required: true
  branch_strategy: "feature-branch"

steps:
  - name: "pull-task"
    type: "PullTaskStep"
    description: "Pull task from Redis stream"
    config:
      streamName: "${REDIS_STREAM_NAME}"
      consumerGroup: "${CONSUMER_GROUP}"
      consumerId: "${CONSUMER_ID}"
      blockTime: 5000
      maxMessages: 1
    outputs:
      - "task"
      - "taskId"

  - name: "update-status-starting"
    type: "TaskUpdateStep"
    description: "Update task status to in_progress"
    depends_on: ["pull-task"]
    config:
      updateType: "status"
      status: "in_progress"
      message: "Starting code implementation workflow"
    outputs:
      - "updated"

  - name: "gather-context"
    type: "ContextStep"
    description: "Scan repository and gather context"
    depends_on: ["pull-task"]
    config:
      repoPath: "${REPO_PATH}"
      includePatterns: ["**/*.ts", "**/*.js", "**/*.json", "**/README*"]
      excludePatterns: ["node_modules/**", ".git/**", "dist/**", "build/**"]
      maxFiles: 500
      maxBytes: 5242880  # 5MB
      trackLines: true
      trackHash: false
    outputs:
      - "context"
      - "repoScan"

  - name: "create-plan"
    type: "PlanningStep"
    description: "Create implementation plan"
    depends_on: ["pull-task", "gather-context"]
    config:
      persona: "lead_engineer"
      temperature: 0.3
      maxPlanningTokens: 2000
      requireApproval: false
      planValidationRules: ["require_risks"]
    outputs:
      - "planningResult"
      - "plan"
      - "breakdown"
      - "risks"

  - name: "update-progress-planning"
    type: "TaskUpdateStep"
    description: "Update progress after planning"
    depends_on: ["create-plan"]
    config:
      updateType: "progress"
      progress: 25
      message: "Implementation plan created"
    outputs:
      - "updated"

  - name: "generate-code"
    type: "CodeGenStep"
    description: "Generate code implementation"
    depends_on: ["create-plan"]
    config:
      persona: "lead_engineer"
      temperature: 0.7
      maxTokens: 4000
      includeContext: true
      retryCount: 2
    outputs:
      - "codeGenResult"
      - "response"
      - "diffs"

  - name: "apply-diffs"
    type: "DiffApplyStep"
    description: "Apply generated code diffs"
    depends_on: ["generate-code"]
    config:
      dryRun: false
      backupOriginals: true
      validateBeforeApply: true
    outputs:
      - "appliedFiles"
      - "success"

  - name: "update-progress-implementation"
    type: "TaskUpdateStep"
    description: "Update progress after implementation"
    depends_on: ["apply-diffs"]
    condition: "success == true"
    config:
      updateType: "progress"
      progress: 75
      message: "Code implementation completed"
    outputs:
      - "updated"

  - name: "run-tests"
    type: "QAStep"
    description: "Run quality assurance tests"
    depends_on: ["apply-diffs"]
    condition: "success == true"
    config:
      testCommand: "npm test"
      timeout: 300000  # 5 minutes
      retryCount: 1
      failureThreshold: 0
      skipOnNoTests: false
    outputs:
      - "qaResult"
      - "testsPassed"
      - "failures"

  - name: "update-status-completed"
    type: "TaskUpdateStep"
    description: "Mark task as completed"
    depends_on: ["run-tests"]
    condition: "testsPassed == true"
    config:
      updateType: "result"
      status: "completed"
      message: "Code implementation and testing completed successfully"
      metadata:
        testsRun: "${qaResult.testResults.total}"
        testsPassed: "${qaResult.testResults.passed}"
    outputs:
      - "updated"

  - name: "update-status-failed"
    type: "TaskUpdateStep"
    description: "Mark task as failed if tests fail"
    depends_on: ["run-tests"]
    condition: "testsPassed == false"
    config:
      updateType: "failure"
      status: "failed"
      message: "Code implementation failed quality assurance tests"
      metadata:
        failures: "${failures}"
        testsRun: "${qaResult.testResults.total}"
        testsFailed: "${qaResult.testResults.failed}"
    outputs:
      - "updated"

failure_handling:
  on_step_failure:
    - step: "update-status-error"
      type: "TaskUpdateStep"
      config:
        updateType: "failure"
        status: "failed"
        message: "Workflow step failed: ${error.message}"
  
  on_workflow_failure:
    - step: "cleanup-resources"
      type: "CleanupStep"
      config:
        cleanupTempFiles: true
        resetRepository: true